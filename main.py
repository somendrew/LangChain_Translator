# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MR9tKnmQompYf1OAM0FowVgSzBCuhX1U
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install -qU langchain-groq

import os
from sam_sk import api_key

os.environ["GROQ_API_KEY"] = api_key

from langchain_groq import ChatGroq

model = ChatGroq(model="llama3-8b-8192")

from langchain_core.messages import HumanMessage, SystemMessage

messages =[
    SystemMessage(content = "English to Italian Translator!"),
    HumanMessage(content = "hi!"),
    ]

model.invoke(messages)

from langchain_core.output_parsers import StrOutputParser

parser = StrOutputParser()
result = model.invoke(messages)
parser.invoke(result)

"""#### The `|` operator is used in LangChain to combine two elements together.

* Chain the model with output
"""

chain = model | parser
chain.invoke(messages)

"""we can see that the chain has two steps: first the language model is called, then the result of that is passed to the output parser

## Prompt Templates

LangChain offers a tool called PromptTemplates that converts the users raw input in such a way model can understand

Let's create a PromptTemplate here. It will take in two user variables:

* `language:` The language to translate text into

* `text:` The text to translate
"""

from langchain_core.prompts import ChatPromptTemplate

#lets create a string that we will format to be the system msg
system_template = "Translate the following into {language}:"

prompt_template = ChatPromptTemplate.from_messages(
    [
        ("system", system_template),
        ("user", "{text}"),
    ]
)

result = prompt_template.invoke({"language": "Italian", "text":"Hi, Beautiful!"})
result

"""We can see that it returns a `ChatPromptValue` that consists of two messages. If we want to access the messages directly we do:"""

result.to_messages()

"""# Chaining together components with LCEL"""

chain = prompt_template | model | parser
chain.invoke({"language":"Italian", "text":"Hi, Beautiful!"})

"""# Serving with LangServe

Now that we've built an application, we need to serve it. That's where LangServe comes in.

"""

